// Epic Battle RPG - ÁàΩÂø´Êà¶Èóò„Ç∑„Çπ„ÉÜ„É†
class BattleRPG {
    constructor() {
        this.gameState = {
            score: 0,
            level: 1,
            exp: 0,
            expToNext: 50, // „É¨„Éô„É´„Ç¢„ÉÉ„Éó„Åó„ÇÑ„Åô„Åè„Åó„Åü
            battleCount: 0
        };

        this.player = {
            name: "ÂãáËÄÖ",
            maxHp: 100,
            hp: 100,
            maxMp: 50,
            mp: 50,
            attack: 20,
            defense: 10,
            level: 1,
            isGuarding: false,
            combo: 0,
            maxCombo: 0,
            currentWeapon: 'sword' // ÂàùÊúüÊ≠¶Âô®„ÅØÂâ£
        };

        this.enemy = null;
        this.enemyTemplates = [
            { name: "„Çπ„É©„Ç§„É†", sprite: "üü¢", hp: 60, attack: 15, defense: 5, exp: 15, gold: 50 },
            { name: "„Ç¥„Éñ„É™„É≥", sprite: "üë∫", hp: 80, attack: 22, defense: 8, exp: 20, gold: 75 },
            { name: "„Ç™„Éº„ÇØ", sprite: "üëπ", hp: 120, attack: 28, defense: 12, exp: 30, gold: 100 },
            { name: "„Éâ„É©„Ç¥„É≥", sprite: "üêâ", hp: 200, attack: 45, defense: 20, exp: 50, gold: 200 },
            { name: "„Éá„Éº„É¢„É≥", sprite: "üòà", hp: 300, attack: 60, defense: 25, exp: 75, gold: 300 }
        ];

        // Ê≠¶Âô®„Ç∑„Çπ„ÉÜ„É†
        this.weapons = {
            sword: { 
                name: "Ââ£", 
                icon: "‚öîÔ∏è", 
                hitCount: 2,
                types: ["slash", "pierce"], // Êñ¨ÊíÉ+Á™Å„Åç
                attackMultiplier: 1.0,
                description: "„Éê„É©„É≥„Çπ„ÅÆÂèñ„Çå„ÅüÊ≠¶Âô®"
            },
            club: { 
                name: "Ê£çÊ£í", 
                icon: "üèè", 
                hitCount: 3,
                types: ["blunt"], // ÊâìÊíÉ
                attackMultiplier: 0.9,
                description: "ÈÄ£Á∂öÊîªÊíÉ„ÅåÂæóÊÑè"
            },
            axe: { 
                name: "Êñß", 
                icon: "ü™ì", 
                hitCount: 1,
                types: ["blunt", "slash"], // ÊâìÊíÉ+Êñ¨ÊíÉ
                attackMultiplier: 1.4,
                description: "‰∏ÄÊíÉ„ÅåÈáç„ÅÑ"
            }
        };

        // ÊîªÊíÉ„Çø„Ç§„ÉóÊÉÖÂ†±
        this.attackTypes = {
            slash: { name: "Êñ¨ÊíÉ", icon: "üó°Ô∏è", color: "#e74c3c" },
            blunt: { name: "ÊâìÊíÉ", icon: "üî®", color: "#f39c12" },
            pierce: { name: "Á™Å„Åç", icon: "üó°Ô∏è", color: "#9b59b6" }
        };

        this.skills = {
            fire: { name: "„Éï„Ç°„Ç§„Ç¢", cost: 10, power: 1.8, effect: "üî•", description: "ÁÇé„ÅÆÈ≠îÊ≥ï„ÅßÊïµ„ÇíÁÑº„Åè", element: "fire" },
            heal: { name: "„Éí„Éº„É´", cost: 15, power: 0.8, effect: "üíö", description: "HP„ÇíÂõûÂæ©„Åô„Çã", element: "holy" },
            thunder: { name: "„Çµ„É≥„ÉÄ„Éº", cost: 20, power: 2.2, effect: "‚ö°", description: "Èõ∑ÊíÉ„ÅßÂ§ß„ÉÄ„É°„Éº„Ç∏", element: "lightning" },
            critical: { name: "„ÇØ„É™„ÉÜ„Ç£„Ç´„É´", cost: 25, power: 3.0, effect: "üí•", description: "ÂøÖÊÆ∫„ÅÆ‰∏ÄÊíÉ", element: "physical" }
        };

        this.items = {
            potion: { name: "„Éù„Éº„Ç∑„Éß„É≥", effect: "heal", power: 30, count: 3 },
            mana: { name: "„Éû„Éä„Éù„Éº„Ç∑„Éß„É≥", effect: "mana", power: 20, count: 2 },
            bomb: { name: "ÁàÜÂºæ", effect: "damage", power: 50, count: 1 }
        };

        this.currentPanel = null;
        this.isPlayerTurn = true;
        this.isBattleActive = false;
        this.comboTimer = null;

        this.init();
    }

    init() {
        this.bindEvents();
        this.spawnNewEnemy();
        this.updateUI();
        this.logMessage("üéÆ Epic Battle RPG „Å∏„Çà„ÅÜ„Åì„ÅùÔºÅÁàΩÂø´„Å™Êà¶Èóò„ÇíÊ•Ω„Åó„ÇÇ„ÅÜÔºÅ");
    }

    bindEvents() {
        // „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥
        document.getElementById('attack-btn').addEventListener('click', () => this.playerAttack());
        document.getElementById('skill-btn').addEventListener('click', () => this.showSkillPanel());
        document.getElementById('guard-btn').addEventListener('click', () => this.playerGuard());
        document.getElementById('item-btn').addEventListener('click', () => this.showItemPanel());

        // „Çπ„Ç≠„É´„Éë„Éç„É´
        document.querySelectorAll('.skill-option').forEach(btn => {
            btn.addEventListener('click', (e) => this.useSkill(e.target.dataset.skill));
        });
        document.getElementById('skill-back').addEventListener('click', () => this.hideActionPanel());

        // „Ç¢„Ç§„ÉÜ„É†„Éë„Éç„É´
        document.querySelectorAll('.item-option').forEach(btn => {
            btn.addEventListener('click', (e) => this.useItem(e.target.dataset.item));
        });
        document.getElementById('item-back').addEventListener('click', () => this.hideActionPanel());

        // ÁµêÊûúÁîªÈù¢
        document.getElementById('next-battle-btn').addEventListener('click', () => this.nextBattle());
        document.getElementById('town-btn').addEventListener('click', () => this.showTown());

        // „Çª„Éº„Éñ„Éª„É≠„Éº„ÉâÊ©üËÉΩ
        document.getElementById('save-btn').addEventListener('click', () => this.saveGame());
        document.getElementById('load-btn').addEventListener('click', () => this.loadGame());

        // Ë°ó„Éª„Ç∑„Éß„ÉÉ„Éó„ÉªÊ≠¶Âô®Ê©üËÉΩ
        document.getElementById('shop-btn').addEventListener('click', () => this.showShop());
        document.getElementById('rest-btn').addEventListener('click', () => this.restAtInn());
        document.getElementById('battle-btn').addEventListener('click', () => this.startBattleFromTown());
        document.getElementById('weapon-btn').addEventListener('click', () => this.showWeaponSelect());
        document.getElementById('town-save-btn').addEventListener('click', () => this.saveGame());
        document.getElementById('shop-back').addEventListener('click', () => this.backToTown());
        document.getElementById('weapon-back').addEventListener('click', () => this.backToTown());

        // „Ç∑„Éß„ÉÉ„Éó„Ç¢„Ç§„ÉÜ„É†Ë≥ºÂÖ•
        document.querySelectorAll('.buy-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.buyItem(e.target.dataset.item, parseInt(e.target.dataset.price)));
        });

        // Ê≠¶Âô®Ë£ÖÂÇô
        document.querySelectorAll('.equip-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const weaponOption = e.target.closest('.weapon-option');
                this.equipWeapon(weaponOption.dataset.weapon);
            });
        });
    }

    spawnNewEnemy() {
        const template = this.enemyTemplates[Math.min(Math.floor(this.gameState.level / 2), this.enemyTemplates.length - 1)];
        const levelMultiplier = 1 + (this.gameState.level - 1) * 0.2;
        
        this.enemy = {
            name: template.name,
            sprite: template.sprite,
            maxHp: Math.floor(template.hp * levelMultiplier),
            hp: Math.floor(template.hp * levelMultiplier),
            attack: Math.floor(template.attack * levelMultiplier),
            defense: Math.floor(template.defense * levelMultiplier),
            exp: Math.floor(template.exp * levelMultiplier),
            gold: Math.floor(template.gold * levelMultiplier)
        };

        document.getElementById('enemy-name').textContent = this.enemy.name;
        document.querySelector('#enemy-character .character-sprite').textContent = this.enemy.sprite;
        this.isBattleActive = true;
        this.isPlayerTurn = true;
        this.player.isGuarding = false;
        this.player.combo = 0;
    }

    playerAttack() {
        if (!this.canPlayerAct()) return;

        const weapon = this.weapons[this.player.currentWeapon];
        const weaponAttack = Math.floor(this.player.attack * weapon.attackMultiplier);
        const damage = this.calculateDamage(weaponAttack, this.enemy.defense);
        const isCritical = Math.random() < 0.15 + (this.player.combo * 0.05); // „Ç≥„É≥„Éú„Åß„ÇØ„É™„ÉÜ„Ç£„Ç´„É´Áéá‰∏äÊòá
        const finalDamage = isCritical ? Math.floor(damage * 2) : damage;

        this.player.combo++;
        if (this.player.combo > this.player.maxCombo) {
            this.player.maxCombo = this.player.combo;
        }

        this.animateCharacter('player', 'attacking');
        
        // ÈÄ£Á∂ö„Éí„ÉÉ„ÉàË°®Á§∫
        this.showMultiHitDamage(finalDamage, 'enemy', isCritical);
        this.showEffect('‚öîÔ∏è', 'enemy');

        this.enemy.hp = Math.max(0, this.enemy.hp - finalDamage);

        const weapon = this.weapons[this.player.currentWeapon];
        const attackTypeText = weapon.types.map(type => this.attackTypes[type].name).join('„Éª');
        
        if (isCritical) {
            this.logMessage(`üí• „ÇØ„É™„ÉÜ„Ç£„Ç´„É´„Éí„ÉÉ„ÉàÔºÅ ${weapon.icon}${weapon.name}(${attackTypeText})„Åß${finalDamage}„ÉÄ„É°„Éº„Ç∏ÔºÅ(„Ç≥„É≥„Éú: ${this.player.combo})`);
        } else {
            this.logMessage(`${weapon.icon} ${weapon.name}(${attackTypeText})„Åß${finalDamage}„ÉÄ„É°„Éº„Ç∏ÔºÅ(„Ç≥„É≥„Éú: ${this.player.combo})`);
        }

        this.updateUI();

        if (this.enemy.hp <= 0) {
            this.victory();
        } else {
            this.nextTurn();
        }
    }

    useSkill(skillName) {
        if (!this.canPlayerAct()) return;
        
        const skill = this.skills[skillName];
        if (this.player.mp < skill.cost) {
            this.logMessage(`‚ùå MP„ÅåË∂≥„Çä„Åæ„Åõ„ÇìÔºÅ${skill.name}„Å´„ÅØ${skill.cost}MPÂøÖË¶Å„Åß„Åô„ÄÇ`);
            return;
        }

        this.player.mp -= skill.cost;
        this.hideActionPanel();

        if (skillName === 'heal') {
            const healAmount = Math.floor(this.player.maxHp * skill.power * 0.5);
            this.player.hp = Math.min(this.player.maxHp, this.player.hp + healAmount);
            this.showDamageNumber(healAmount, 'player', false, true);
            this.showEffect(skill.effect, 'player');
            this.logMessage(`üíö ${skill.name}„ÅßHP ${healAmount}ÂõûÂæ©ÔºÅ`);
        } else {
            const baseDamage = Math.floor(this.player.attack * skill.power);
            const damage = this.calculateDamage(baseDamage, this.enemy.defense);
            const isCritical = Math.random() < 0.3; // „Çπ„Ç≠„É´„ÅØÈ´ò„ÅÑ„ÇØ„É™„ÉÜ„Ç£„Ç´„É´Áéá
            const finalDamage = isCritical ? Math.floor(damage * 1.5) : damage;

            this.player.combo += 2; // „Çπ„Ç≠„É´„ÅØ„Ç≥„É≥„Éú„ÅåÂ§ö„ÅèÂ¢óÂä†
            if (this.player.combo > this.player.maxCombo) {
                this.player.maxCombo = this.player.combo;
            }

            this.animateCharacter('player', 'attacking');
            this.showDamageNumber(finalDamage, 'enemy', isCritical);
            this.showEffect(skill.effect, 'enemy');
            
            this.enemy.hp = Math.max(0, this.enemy.hp - finalDamage);

            const critText = isCritical ? " „ÇØ„É™„ÉÜ„Ç£„Ç´„É´ÔºÅ" : "";
            this.logMessage(`‚ú® ${skill.name}„Åß${finalDamage}„ÉÄ„É°„Éº„Ç∏ÔºÅ${critText}(„Ç≥„É≥„Éú: ${this.player.combo})`);
        }

        this.updateUI();

        if (this.enemy.hp <= 0) {
            this.victory();
        } else {
            this.nextTurn();
        }
    }

    useItem(itemName) {
        if (!this.canPlayerAct()) return;

        const item = this.items[itemName];
        if (item.count <= 0) {
            this.logMessage(`‚ùå ${item.name}„Åå„ÅÇ„Çä„Åæ„Åõ„ÇìÔºÅ`);
            return;
        }

        item.count--;
        this.hideActionPanel();

        if (item.effect === 'heal') {
            this.player.hp = Math.min(this.player.maxHp, this.player.hp + item.power);
            this.showDamageNumber(item.power, 'player', false, true);
            this.showEffect('üíö', 'player');
            this.logMessage(`üß™ ${item.name}„ÅßHP ${item.power}ÂõûÂæ©ÔºÅ`);
        } else if (item.effect === 'mana') {
            this.player.mp = Math.min(this.player.maxMp, this.player.mp + item.power);
            this.showDamageNumber(item.power, 'player', false, true);
            this.showEffect('üíô', 'player');
            this.logMessage(`üíô ${item.name}„ÅßMP ${item.power}ÂõûÂæ©ÔºÅ`);
        } else if (item.effect === 'damage') {
            const damage = this.calculateDamage(item.power, this.enemy.defense);
            this.enemy.hp = Math.max(0, this.enemy.hp - damage);
            this.showDamageNumber(damage, 'enemy', false);
            this.showEffect('üí£', 'enemy');
            this.logMessage(`üí£ ${item.name}„Åß${damage}„ÉÄ„É°„Éº„Ç∏ÔºÅ`);
        }

        this.updateUI();

        if (this.enemy.hp <= 0) {
            this.victory();
        } else {
            this.nextTurn();
        }
    }

    playerGuard() {
        if (!this.canPlayerAct()) return;

        this.player.isGuarding = true;
        this.animateCharacter('player', 'guarding');
        this.logMessage(`üõ°Ô∏è ${this.player.name}„ÅØÈò≤Âæ°„ÅÆÊßã„Åà„ÇíÂèñ„Å£„ÅüÔºÅ`);
        
        // MPÂ∞ë„ÅóÂõûÂæ©
        this.player.mp = Math.min(this.player.maxMp, this.player.mp + 5);
        this.updateUI();
        this.nextTurn();
    }

    enemyTurn() {
        if (!this.isBattleActive) return;

        setTimeout(() => {
            const action = Math.random() < 0.8 ? 'attack' : 'special';
            
            if (action === 'attack') {
                let damage = this.calculateDamage(this.enemy.attack, this.player.defense);
                
                if (this.player.isGuarding) {
                    damage = Math.floor(damage * 0.5);
                    this.logMessage(`üõ°Ô∏è Èò≤Âæ°„Å´„Çà„Çä${damage}„ÉÄ„É°„Éº„Ç∏„Å´ËªΩÊ∏õÔºÅ`);
                } else {
                    // „Ç≥„É≥„Éú„É™„Çª„ÉÉ„Éà
                    if (this.player.combo > 0) {
                        this.logMessage(`üíî „Ç≥„É≥„Éú„ÅåÈÄîÂàá„Çå„ÅüÔºÅ(ÊúÄÂ§ß„Ç≥„É≥„Éú: ${this.player.combo})`);
                        this.player.combo = 0;
                    }
                }

                this.animateCharacter('enemy', 'attacking');
                this.showDamageNumber(damage, 'player', false);
                this.showEffect('üí¢', 'player');

                this.player.hp = Math.max(0, this.player.hp - damage);
                this.logMessage(`üëπ ${this.enemy.name}„ÅÆÊîªÊíÉ„Åß${damage}„ÉÄ„É°„Éº„Ç∏ÔºÅ`);
            } else {
                // Êïµ„ÅÆÁâπÊÆäÊîªÊíÉ
                const specialDamage = Math.floor(this.enemy.attack * 1.5);
                const damage = this.calculateDamage(specialDamage, this.player.defense);
                
                this.animateCharacter('enemy', 'attacking');
                this.showDamageNumber(damage, 'player', false);
                this.showEffect('üî•', 'player');

                this.player.hp = Math.max(0, this.player.hp - damage);
                this.logMessage(`üî• ${this.enemy.name}„ÅÆÁâπÊÆäÊîªÊíÉ„Åß${damage}„ÉÄ„É°„Éº„Ç∏ÔºÅ`);
                
                // „Ç≥„É≥„Éú„É™„Çª„ÉÉ„Éà
                if (this.player.combo > 0) {
                    this.logMessage(`üíî „Ç≥„É≥„Éú„ÅåÈÄîÂàá„Çå„ÅüÔºÅ(ÊúÄÂ§ß„Ç≥„É≥„Éú: ${this.player.combo})`);
                    this.player.combo = 0;
                }
            }

            this.player.isGuarding = false;
            this.updateUI();

            if (this.player.hp <= 0) {
                this.gameOver();
            } else {
                this.isPlayerTurn = true;
                this.enablePlayerActions();
            }
        }, 1500);
    }

    calculateDamage(attack, defense) {
        const baseDamage = attack - defense;
        const variance = Math.random() * 0.4 + 0.8; // 80-120%„ÅÆÂ§âÂãï
        return Math.max(1, Math.floor(baseDamage * variance));
    }

    victory() {
        this.isBattleActive = false;
        this.gameState.score += this.enemy.gold;
        this.gameState.exp += this.enemy.exp;
        this.gameState.battleCount++;

        // „É¨„Éô„É´„Ç¢„ÉÉ„Éó„ÉÅ„Çß„ÉÉ„ÇØ
        let leveledUp = false;
        while (this.gameState.exp >= this.gameState.expToNext) {
            this.gameState.exp -= this.gameState.expToNext;
            this.gameState.level++;
            this.gameState.expToNext = Math.floor(this.gameState.expToNext * 1.1); // ÊàêÈï∑Áéá„ÇÇÁ∑©„ÇÑ„Åã„Å´
            this.levelUp();
            leveledUp = true;
        }

        const comboBonus = this.player.maxCombo > 5 ? Math.floor(this.enemy.gold * 0.2) : 0;
        if (comboBonus > 0) {
            this.gameState.score += comboBonus;
        }

        this.showResultScreen(true, leveledUp, comboBonus);
        this.logMessage(`üéâ ${this.enemy.name}„ÇíÂÄí„Åó„ÅüÔºÅÁµåÈ®ìÂÄ§${this.enemy.exp}„ÄÅ„Ç¥„Éº„É´„Éâ${this.enemy.gold}„ÇíÁç≤ÂæóÔºÅ`);
        
        if (comboBonus > 0) {
            this.logMessage(`üî• „Ç≥„É≥„Éú„Éú„Éº„Éä„ÇπÔºÅËøΩÂä†„Åß${comboBonus}„Ç¥„Éº„É´„Éâ„ÇíÁç≤ÂæóÔºÅ`);
        }
    }

    levelUp() {
        this.player.level++;
        const hpIncrease = Math.floor(20 + Math.random() * 10);
        const mpIncrease = Math.floor(10 + Math.random() * 5);
        const attackIncrease = Math.floor(3 + Math.random() * 3);
        const defenseIncrease = Math.floor(2 + Math.random() * 2);

        this.player.maxHp += hpIncrease;
        this.player.hp = this.player.maxHp; // ÂÆåÂÖ®ÂõûÂæ©
        this.player.maxMp += mpIncrease;
        this.player.mp = this.player.maxMp; // ÂÆåÂÖ®ÂõûÂæ©
        this.player.attack += attackIncrease;
        this.player.defense += defenseIncrease;

        this.showEffect('‚≠ê', 'player');
        this.logMessage(`üåü „É¨„Éô„É´„Ç¢„ÉÉ„ÉóÔºÅHP+${hpIncrease}, MP+${mpIncrease}, ÊîªÊíÉÂäõ+${attackIncrease}, Èò≤Âæ°Âäõ+${defenseIncrease}`);
    }

    gameOver() {
        this.isBattleActive = false;
        this.showResultScreen(false, false, 0);
        this.logMessage(`üíÄ ${this.player.name}„ÅØÂÄí„Çå„Åü...`);
    }

    nextBattle() {
        this.hideResultScreen();
        this.spawnNewEnemy();
        this.updateUI();
        
        // „Ç¢„Ç§„ÉÜ„É†Â∞ë„ÅóÂõûÂæ©
        Object.values(this.items).forEach(item => {
            if (Math.random() < 0.3) {
                item.count = Math.min(item.count + 1, 5);
            }
        });
        
        this.logMessage(`‚öîÔ∏è Ê¨°„ÅÆÊà¶ÈóòÈñãÂßãÔºÅ${this.enemy.name}„ÅåÁèæ„Çå„ÅüÔºÅ`);
    }

    restart() {
        this.gameState = { score: 0, level: 1, exp: 0, expToNext: 50, battleCount: 0 };
        this.player = {
            name: "ÂãáËÄÖ", maxHp: 100, hp: 100, maxMp: 50, mp: 50,
            attack: 20, defense: 10, level: 1, isGuarding: false, combo: 0, maxCombo: 0, currentWeapon: 'sword'
        };
        
        // „Ç¢„Ç§„ÉÜ„É†„É™„Çª„ÉÉ„Éà
        this.items.potion.count = 3;
        this.items.mana.count = 2;
        this.items.bomb.count = 1;

        this.hideResultScreen();
        this.spawnNewEnemy();
        this.updateUI();
        this.clearLog();
        this.logMessage("üéÆ „Ç≤„Éº„É†„É™„Çπ„Çø„Éº„ÉàÔºÅÊñ∞„Åü„Å™ÂÜíÈô∫„ÅÆÂßã„Åæ„Çä„Å†ÔºÅ");
    }

    // UIÈñ¢ÈÄ£„É°„ÇΩ„ÉÉ„Éâ
    canPlayerAct() {
        return this.isBattleActive && this.isPlayerTurn;
    }

    enablePlayerActions() {
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.disabled = false;
        });
    }

    disablePlayerActions() {
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.disabled = true;
        });
    }

    nextTurn() {
        this.isPlayerTurn = false;
        this.disablePlayerActions();
        setTimeout(() => {
            this.enemyTurn();
        }, 800);
    }

    updateUI() {
        // „Ç≤„Éº„É†Áä∂ÊÖã
        document.getElementById('score').textContent = `Score: ${this.gameState.score}`;
        document.getElementById('level').textContent = `Level: ${this.gameState.level}`;
        document.getElementById('exp').textContent = `EXP: ${this.gameState.exp}/${this.gameState.expToNext}`;

        // „Éó„É¨„Ç§„É§„ÉºHP/MP
        const playerHpPercent = (this.player.hp / this.player.maxHp) * 100;
        const playerMpPercent = (this.player.mp / this.player.maxMp) * 100;
        
        document.getElementById('player-hp-bar').style.width = `${playerHpPercent}%`;
        document.getElementById('player-hp-text').textContent = `${this.player.hp}/${this.player.maxHp}`;
        document.getElementById('player-mp-bar').style.width = `${playerMpPercent}%`;
        document.getElementById('player-mp-text').textContent = `${this.player.mp}/${this.player.maxMp}`;

        // ÊïµHP
        if (this.enemy) {
            const enemyHpPercent = (this.enemy.hp / this.enemy.maxHp) * 100;
            document.getElementById('enemy-hp-bar').style.width = `${enemyHpPercent}%`;
            document.getElementById('enemy-hp-text').textContent = `${this.enemy.hp}/${this.enemy.maxHp}`;
        }

        // HP„Éê„Éº„ÅÆËâ≤„ÇíÂ§âÊõ¥
        const playerHpBar = document.getElementById('player-hp-bar');
        if (playerHpPercent < 25) {
            playerHpBar.style.background = 'linear-gradient(90deg, #e74c3c 0%, #c0392b 100%)';
        } else if (playerHpPercent < 50) {
            playerHpBar.style.background = 'linear-gradient(90deg, #f39c12 0%, #e67e22 100%)';
        } else {
            playerHpBar.style.background = 'linear-gradient(90deg, #27ae60 0%, #229954 100%)';
        }

        // „Ç¢„Ç§„ÉÜ„É†Êï∞Êõ¥Êñ∞
        document.querySelector('[data-item="potion"]').textContent = `üß™ „Éù„Éº„Ç∑„Éß„É≥ (${this.items.potion.count})`;
        document.querySelector('[data-item="mana"]').textContent = `üíô „Éû„Éä„Éù„Éº„Ç∑„Éß„É≥ (${this.items.mana.count})`;
        document.querySelector('[data-item="bomb"]').textContent = `üí£ ÁàÜÂºæ (${this.items.bomb.count})`;
    }

    showSkillPanel() {
        this.hideActionPanel();
        document.getElementById('skill-panel').classList.remove('hidden');
        this.currentPanel = 'skill';
    }

    showItemPanel() {
        this.hideActionPanel();
        document.getElementById('item-panel').classList.remove('hidden');
        this.currentPanel = 'item';
    }

    hideActionPanel() {
        document.getElementById('skill-panel').classList.add('hidden');
        document.getElementById('item-panel').classList.add('hidden');
        this.currentPanel = null;
    }

    showResultScreen(victory, leveledUp, comboBonus) {
        const screen = document.getElementById('result-screen');
        const title = document.getElementById('result-title');
        const message = document.getElementById('result-message');
        const expSpan = document.getElementById('gained-exp');
        const goldSpan = document.getElementById('gained-gold');

        if (victory) {
            title.textContent = 'üéâ ÂãùÂà©ÔºÅ';
            message.textContent = `${this.enemy.name}„ÇíË¶ã‰∫ã„Å´ÂÄí„Åó„ÅüÔºÅ`;
            if (leveledUp) {
                message.textContent += ` „É¨„Éô„É´„Ç¢„ÉÉ„ÉóÔºÅ`;
            }
            if (comboBonus > 0) {
                message.textContent += ` ÊúÄÂ§ß„Ç≥„É≥„Éú: ${this.player.maxCombo}`;
            }
        } else {
            title.textContent = 'üíÄ ÊïóÂåó...';
            message.textContent = 'Ê¨°„ÅØ„ÇÇ„Å£„Å®Âº∑„Åè„Å™„Å£„Å¶Êåë„ÇÇ„ÅÜÔºÅ';
        }

        expSpan.textContent = victory ? this.enemy.exp : 0;
        goldSpan.textContent = victory ? (this.enemy.gold + comboBonus) : 0;
        
        screen.classList.remove('hidden');
    }

    hideResultScreen() {
        document.getElementById('result-screen').classList.add('hidden');
    }

    logMessage(message) {
        const logContent = document.getElementById('log-content');
        const p = document.createElement('p');
        p.textContent = message;
        logContent.appendChild(p);
        
        // Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´ÔºàÈáçË¶ÅÔºÅÔºâ
        setTimeout(() => {
            logContent.scrollTop = logContent.scrollHeight;
        }, 10);

        // „É≠„Ç∞„ÅÆË°åÊï∞Âà∂Èôê
        if (logContent.children.length > 15) { // Â¢ó„ÇÑ„Åó„Å¶„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂ§ö„ÅèË°®Á§∫
            logContent.removeChild(logContent.firstChild);
        }
    }

    clearLog() {
        document.getElementById('log-content').innerHTML = '';
    }

    animateCharacter(target, animation) {
        const character = document.getElementById(`${target}-character`);
        character.classList.add(animation);
        setTimeout(() => {
            character.classList.remove(animation);
        }, 600);
    }

    showDamageNumber(damage, target, isCritical = false, isHeal = false) {
        const damageArea = document.getElementById('damage-area');
        const damageDiv = document.createElement('div');
        
        damageDiv.className = `damage-number ${isCritical ? 'critical' : ''} ${isHeal ? 'heal' : ''}`;
        damageDiv.textContent = isHeal ? `+${damage}` : `-${damage}`;
        
        const targetElement = document.getElementById(`${target}-character`);
        const rect = targetElement.getBoundingClientRect();
        
        damageDiv.style.left = `${rect.left + rect.width / 2}px`;
        damageDiv.style.top = `${rect.top}px`;
        
        damageArea.appendChild(damageDiv);
        
        setTimeout(() => {
            damageArea.removeChild(damageDiv);
        }, 1800);
    }

    // ÈÄ£Á∂ö„Éí„ÉÉ„ÉàË°®Á§∫„Ç∑„Çπ„ÉÜ„É†ÔºàÊ≠¶Âô®Âà•Ôºâ
    showMultiHitDamage(totalDamage, target, isCritical = false) {
        const currentWeapon = this.weapons[this.player.currentWeapon];
        const hitCount = currentWeapon.hitCount;
        const damages = this.splitDamage(totalDamage, hitCount);
        
        const targetElement = document.getElementById(`${target}-character`);
        const rect = targetElement.getBoundingClientRect();
        
        damages.forEach((damage, index) => {
            setTimeout(() => {
                this.createMultiHitNumber(damage, rect, index, hitCount, isCritical, currentWeapon);
            }, index * 120); // Ê≠¶Âô®„Å´Âøú„Åò„Å¶ÈñìÈöîË™øÊï¥
        });
        
        // ÂêàË®à„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫
        setTimeout(() => {
            this.createTotalDamageNumber(totalDamage, rect, isCritical, currentWeapon);
        }, hitCount * 120 + 300);
    }

    // „ÉÄ„É°„Éº„Ç∏„ÇíË§áÊï∞„Éí„ÉÉ„Éà„Å´ÂàÜÂâ≤
    splitDamage(totalDamage, hitCount) {
        const baseDamage = Math.floor(totalDamage / hitCount);
        const remainder = totalDamage % hitCount;
        const damages = [];
        
        for (let i = 0; i < hitCount; i++) {
            let damage = baseDamage;
            if (i < remainder) damage++; // ‰Ωô„Çä„ÇíÂâç„ÅÆ„Éí„ÉÉ„Éà„Å´ÈÖçÂàÜ
            
            // Â∞ë„ÅóÂ§âÂãï„ÇíÂä†„Åà„Çã
            const variation = Math.floor(Math.random() * 3) - 1; // -1, 0, +1
            damage = Math.max(1, damage + variation);
            damages.push(damage);
        }
        
        return damages;
    }

    // ÂÄãÂà•„Éí„ÉÉ„ÉàÊï∞ÂÄ§Ë°®Á§∫ÔºàÊ≠¶Âô®ÊÉÖÂ†±‰ªò„ÅçÔºâ
    createMultiHitNumber(damage, targetRect, index, totalHits, isCritical, weapon) {
        const damageArea = document.getElementById('damage-area');
        const hitDiv = document.createElement('div');
        
        // ÊîªÊíÉ„Çø„Ç§„Éó„Å´Âøú„Åò„ÅüËâ≤Ë®≠ÂÆö
        const attackType = weapon.types[index % weapon.types.length];
        const typeInfo = this.attackTypes[attackType];
        
        hitDiv.className = `multi-hit-number ${isCritical ? 'critical' : ''} ${attackType}`;
        hitDiv.textContent = `-${damage}`;
        hitDiv.style.color = typeInfo.color;
        
        // ‰ΩçÁΩÆ„Çí„Åö„Çâ„Åó„Å¶Ë°®Á§∫
        const offsetX = (index - totalHits / 2) * 40 + (Math.random() - 0.5) * 20;
        const offsetY = Math.random() * 30 - 15;
        
        hitDiv.style.left = `${targetRect.left + targetRect.width / 2 + offsetX}px`;
        hitDiv.style.top = `${targetRect.top + offsetY}px`;
        hitDiv.style.fontSize = weapon.hitCount === 1 ? '2rem' : '1.5rem'; // Êñß„ÅØÂ§ß„Åç„ÅèË°®Á§∫
        hitDiv.style.animation = 'multiHitFloat 1.2s ease-out forwards';
        
        damageArea.appendChild(hitDiv);
        
        setTimeout(() => {
            if (damageArea.contains(hitDiv)) {
                damageArea.removeChild(hitDiv);
            }
        }, 1200);
    }

    // ÂêàË®à„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫ÔºàÊ≠¶Âô®ÊÉÖÂ†±‰ªò„ÅçÔºâ
    createTotalDamageNumber(totalDamage, targetRect, isCritical, weapon) {
        const damageArea = document.getElementById('damage-area');
        const totalDiv = document.createElement('div');
        
        // Ê≠¶Âô®„Ç¢„Ç§„Ç≥„É≥‰ªò„Åç
        totalDiv.className = `total-damage-number ${isCritical ? 'critical' : ''}`;
        totalDiv.textContent = `${weapon.icon} ${totalDamage}`;
        
        totalDiv.style.left = `${targetRect.left + targetRect.width / 2}px`;
        totalDiv.style.top = `${targetRect.top - 20}px`;
        totalDiv.style.fontSize = '2rem';
        totalDiv.style.fontWeight = 'bold';
        totalDiv.style.animation = 'totalDamageShow 2s ease-out forwards';
        
        damageArea.appendChild(totalDiv);
        
        setTimeout(() => {
            if (damageArea.contains(totalDiv)) {
                damageArea.removeChild(totalDiv);
            }
        }, 2000);
    }

    showEffect(effectChar, target) {
        const effectArea = document.getElementById('effect-area');
        const effectDiv = document.createElement('div');
        
        effectDiv.className = 'effect';
        effectDiv.textContent = effectChar;
        
        const targetElement = document.getElementById(`${target}-character`);
        const rect = targetElement.getBoundingClientRect();
        
        effectDiv.style.left = `${rect.left + rect.width / 2}px`;
        effectDiv.style.top = `${rect.top + rect.height / 2}px`;
        
        effectArea.appendChild(effectDiv);
        
        setTimeout(() => {
            effectArea.removeChild(effectDiv);
        }, 1000);
    }

    // „Çª„Éº„ÉñÊ©üËÉΩ
    saveGame() {
        try {
            const saveData = {
                gameState: this.gameState,
                player: this.player,
                items: this.items,
                enemy: this.enemy,
                saveTime: new Date().toISOString(),
                version: "0.32"
            };

            localStorage.setItem('epicBattleRPG_save', JSON.stringify(saveData));
            
            this.logMessage('üíæ „Ç≤„Éº„É†„Çí„Çª„Éº„Éñ„Åó„Åæ„Åó„ÅüÔºÅ');
            this.showTemporaryMessage('„Çª„Éº„ÉñÂÆå‰∫ÜÔºÅ', 'success');
        } catch (error) {
            this.logMessage('‚ùå „Çª„Éº„Éñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
            this.showTemporaryMessage('„Çª„Éº„ÉñÂ§±Êïó...', 'error');
        }
    }

    // „É≠„Éº„ÉâÊ©üËÉΩ
    loadGame() {
        try {
            const savedData = localStorage.getItem('epicBattleRPG_save');
            if (!savedData) {
                this.logMessage('‚ùå „Çª„Éº„Éñ„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
                this.showTemporaryMessage('„Çª„Éº„Éñ„Éá„Éº„Çø„Å™„Åó', 'error');
                return;
            }

            const saveData = JSON.parse(savedData);
            
            // „Éá„Éº„ÇøÂæ©ÂÖÉ
            this.gameState = saveData.gameState;
            this.player = saveData.player;
            this.items = saveData.items;
            this.enemy = saveData.enemy;

            // Êïµ„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆÂá¶ÁêÜ
            if (this.enemy) {
                document.getElementById('enemy-name').textContent = this.enemy.name;
                document.querySelector('#enemy-character .character-sprite').textContent = this.enemy.sprite;
                this.isBattleActive = true;
            } else {
                this.spawnNewEnemy();
            }

            this.updateUI();
            this.clearLog();
            
            const saveTime = new Date(saveData.saveTime).toLocaleString();
            this.logMessage(`üìÇ „Ç≤„Éº„É†„Çí„É≠„Éº„Éâ„Åó„Åæ„Åó„ÅüÔºÅ(${saveTime})`);
            this.showTemporaryMessage('„É≠„Éº„ÉâÂÆå‰∫ÜÔºÅ', 'success');
            
        } catch (error) {
            this.logMessage('‚ùå „É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
            this.showTemporaryMessage('„É≠„Éº„ÉâÂ§±Êïó...', 'error');
        }
    }

    // ‰∏ÄÊôÇÁöÑ„Å™„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
    showTemporaryMessage(message, type = 'info') {
        const messageDiv = document.createElement('div');
        messageDiv.className = `temp-message ${type}`;
        messageDiv.textContent = message;
        messageDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 2rem;
            border-radius: 10px;
            color: white;
            font-weight: bold;
            z-index: 10000;
            animation: fadeInOut 3s ease-in-out forwards;
            ${type === 'success' ? 'background: linear-gradient(135deg, #27ae60, #229954);' : 
              type === 'error' ? 'background: linear-gradient(135deg, #e74c3c, #c0392b);' : 
              'background: linear-gradient(135deg, #3498db, #2980b9);'}
        `;

        document.body.appendChild(messageDiv);

        setTimeout(() => {
            document.body.removeChild(messageDiv);
        }, 3000);

        // CSS „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíÂãïÁöÑ„Å´ËøΩÂä†
        if (!document.getElementById('temp-message-styles')) {
            const style = document.createElement('style');
            style.id = 'temp-message-styles';
            style.textContent = `
                @keyframes fadeInOut {
                    0% { opacity: 0; transform: translateX(100px); }
                    20%, 80% { opacity: 1; transform: translateX(0); }
                    100% { opacity: 0; transform: translateX(100px); }
                }
            `;
            document.head.appendChild(style);
        }
    }

    // Ë°óÊ©üËÉΩ
    showTown() {
        this.hideResultScreen();
        this.updateTownUI();
        document.getElementById('town-screen').classList.remove('hidden');
        this.logMessage('üèòÔ∏è ÂÜíÈô∫ËÄÖ„ÅÆË°ó„Å´Âà∞ÁùÄ„Åó„Åæ„Åó„Åü„ÄÇ');
    }

    hideTown() {
        document.getElementById('town-screen').classList.add('hidden');
    }

    updateTownUI() {
        document.getElementById('town-gold').textContent = this.gameState.score;
        document.getElementById('town-level').textContent = this.gameState.level;
        document.getElementById('town-exp').textContent = this.gameState.exp;
        document.getElementById('town-exp-next').textContent = this.gameState.expToNext;
        
        // ÁèæÂú®„ÅÆÊ≠¶Âô®Ë°®Á§∫„ÇíÊõ¥Êñ∞
        const currentWeapon = this.weapons[this.player.currentWeapon];
        const townStatsEl = document.getElementById('town-stats');
        const weaponInfoEl = townStatsEl.querySelector('.weapon-info');
        
        if (weaponInfoEl) {
            weaponInfoEl.remove();
        }
        
        const weaponInfo = document.createElement('p');
        weaponInfo.className = 'weapon-info';
        weaponInfo.innerHTML = `üó°Ô∏è ÁèæÂú®„ÅÆÊ≠¶Âô®: ${currentWeapon.icon} ${currentWeapon.name}`;
        townStatsEl.appendChild(weaponInfo);
    }

    // „Ç∑„Éß„ÉÉ„ÉóÊ©üËÉΩ
    showShop() {
        this.hideTown();
        this.updateShopUI();
        document.getElementById('shop-screen').classList.remove('hidden');
        this.logMessage('üè™ „Ç¢„Ç§„ÉÜ„É†„Ç∑„Éß„ÉÉ„Éó„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ');
    }

    hideShop() {
        document.getElementById('shop-screen').classList.add('hidden');
    }

    updateShopUI() {
        // ÁèæÂú®„ÅÆÊâÄÊåÅÈáë
        document.getElementById('shop-current-gold').textContent = this.gameState.score;
        
        // „Ç§„É≥„Éô„É≥„Éà„É™Ë°®Á§∫
        document.getElementById('inv-potion').textContent = this.items.potion.count;
        document.getElementById('inv-mana').textContent = this.items.mana.count;
        document.getElementById('inv-bomb').textContent = this.items.bomb.count;

        // Ë≥ºÂÖ•„Éú„Çø„É≥„ÅÆÁä∂ÊÖãÊõ¥Êñ∞
        document.querySelectorAll('.buy-btn').forEach(btn => {
            const price = parseInt(btn.dataset.price);
            btn.disabled = this.gameState.score < price;
        });
    }

    buyItem(itemName, price) {
        if (this.gameState.score < price) {
            this.showTemporaryMessage('„ÅäÈáë„ÅåË∂≥„Çä„Åæ„Åõ„ÇìÔºÅ', 'error');
            return;
        }

        this.gameState.score -= price;
        this.items[itemName].count++;

        const itemNames = {
            potion: '„Éù„Éº„Ç∑„Éß„É≥',
            mana: '„Éû„Éä„Éù„Éº„Ç∑„Éß„É≥',
            bomb: 'ÁàÜÂºæ'
        };

        this.logMessage(`üõí ${itemNames[itemName]}„ÇíË≥ºÂÖ•„Åó„Åæ„Åó„ÅüÔºÅ(-${price}G)`);
        this.showTemporaryMessage(`${itemNames[itemName]}Ë≥ºÂÖ•ÔºÅ`, 'success');
        this.updateShopUI();
        this.updateUI();
    }

    // ÂÆøÂ±ã„Åß„ÅÆ‰ºëÊÅØ
    restAtInn() {
        const cost = 20;
        
        // ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫
        const hpStatus = `HP: ${this.player.hp}/${this.player.maxHp}`;
        const mpStatus = `MP: ${this.player.mp}/${this.player.maxMp}`;
        const currentStatus = `${hpStatus}, ${mpStatus}`;
        
        if (this.gameState.score < cost) {
            this.showTemporaryMessage('ÂÆø‰ª£„ÅåË∂≥„Çä„Åæ„Åõ„ÇìÔºÅ', 'error');
            this.logMessage(`‚ùå ÂÆø‰ª£${cost}G„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ(ÁèæÂú®: ${currentStatus})`);
            return;
        }

        if (this.player.hp === this.player.maxHp && this.player.mp === this.player.maxMp) {
            this.showTemporaryMessage('„Åô„Åß„Å´ÂÆåÂÖ®ÂõûÂæ©„Åó„Å¶„ÅÑ„Åæ„Åô', 'info');
            this.logMessage(`‚ÑπÔ∏è „Åô„Åß„Å´ÂÆåÂÖ®ÂõûÂæ©Áä∂ÊÖã„Åß„Åô„ÄÇ(${currentStatus})`);
            return;
        }

        // ÂõûÂæ©Ââç„ÅÆÁä∂ÊÖã„Çí„É≠„Ç∞„Å´Ë®òÈå≤
        this.logMessage(`üõèÔ∏è ÂÆøÂ±ãÂà©Áî®Ââç: ${currentStatus}`);
        
        this.gameState.score -= cost;
        this.player.hp = this.player.maxHp;
        this.player.mp = this.player.maxMp;
        
        this.logMessage(`üõèÔ∏è ÂÆøÂ±ã„Åß‰ºëÊÅØ„Åó„Åæ„Åó„Åü„ÄÇHP„ÉªMPÂÆåÂÖ®ÂõûÂæ©ÔºÅ(-${cost}G)`);
        this.showTemporaryMessage('ÂÆåÂÖ®ÂõûÂæ©ÔºÅ', 'success');
        this.updateTownUI();
        this.updateUI();
    }

    // Ë°ó„Åã„ÇâÊà¶ÈóòÈñãÂßã
    startBattleFromTown() {
        this.hideTown();
        this.spawnNewEnemy();
        this.updateUI();
        this.logMessage('‚öîÔ∏è ÂÜíÈô∫„Å´Âá∫Áô∫ÔºÅÊñ∞„Åü„Å™Êïµ„Å®„ÅÆÈÅ≠ÈÅá...');
    }

    // „Ç∑„Éß„ÉÉ„Éó„Åã„ÇâË°ó„Å´Êàª„ÇãÔºàÈáçË¶ÅÔºöÁîªÈù¢„ÇíÊ≠£„Åó„ÅèÂàá„ÇäÊõø„ÅàÔºâ
    backToTown() {
        this.hideShop();
        this.hideWeaponSelect();
        this.showTown();
    }

    // Ê≠¶Âô®ÈÅ∏ÊäûÁîªÈù¢Ë°®Á§∫
    showWeaponSelect() {
        this.hideTown();
        this.updateWeaponUI();
        document.getElementById('weapon-screen').classList.remove('hidden');
        this.logMessage('üó°Ô∏è Ê≠¶Âô®Â§âÊõ¥ÁîªÈù¢„ÇíÈñã„Åç„Åæ„Åó„Åü');
    }

    hideWeaponSelect() {
        document.getElementById('weapon-screen').classList.add('hidden');
    }

    // ÁèæÂú®„ÅÆÊ≠¶Âô®UIÊõ¥Êñ∞
    updateWeaponUI() {
        const currentWeapon = this.weapons[this.player.currentWeapon];
        const currentWeaponDisplay = document.getElementById('current-weapon-display');
        
        const attackTypeText = currentWeapon.types.map(type => this.attackTypes[type].name).join('„Éª');
        
        currentWeaponDisplay.innerHTML = `
            <span style="font-size: 2rem;">${currentWeapon.icon}</span>
            <div>
                <strong>${currentWeapon.name}</strong><br>
                <span style="color: #f39c12;">${attackTypeText} | ${currentWeapon.hitCount}„Éí„ÉÉ„Éà</span><br>
                <span style="opacity: 0.8;">${currentWeapon.description}</span>
            </div>
        `;

        // Ê≠¶Âô®„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÁèæÂú®Ë£ÖÂÇôÁä∂ÊÖãÊõ¥Êñ∞
        document.querySelectorAll('.weapon-option').forEach(option => {
            const weaponKey = option.dataset.weapon;
            const equipBtn = option.querySelector('.equip-btn');
            
            if (weaponKey === this.player.currentWeapon) {
                option.classList.add('current');
                equipBtn.textContent = 'Ë£ÖÂÇô‰∏≠';
                equipBtn.disabled = true;
            } else {
                option.classList.remove('current');
                equipBtn.textContent = 'Ë£ÖÂÇô';
                equipBtn.disabled = false;
            }
        });
    }

    // Ê≠¶Âô®Ë£ÖÂÇô
    equipWeapon(weaponKey) {
        if (weaponKey === this.player.currentWeapon) {
            this.showTemporaryMessage('„Åô„Åß„Å´Ë£ÖÂÇô„Åó„Å¶„ÅÑ„Åæ„Åô', 'info');
            return;
        }

        const oldWeapon = this.weapons[this.player.currentWeapon];
        const newWeapon = this.weapons[weaponKey];
        
        this.player.currentWeapon = weaponKey;
        
        this.logMessage(`üó°Ô∏è Ê≠¶Âô®„ÇíÂ§âÊõ¥: ${oldWeapon.icon}${oldWeapon.name} ‚Üí ${newWeapon.icon}${newWeapon.name}`);
        this.showTemporaryMessage(`${newWeapon.icon}${newWeapon.name}„ÇíË£ÖÂÇôÔºÅ`, 'success');
        
        this.updateWeaponUI();
        this.updateUI(); // „Éó„É¨„Ç§„É§„Éº„Çπ„Éó„É©„Ç§„ÉàÊõ¥Êñ∞
    }
}

// „Ç≤„Éº„É†ÈñãÂßã
document.addEventListener('DOMContentLoaded', () => {
    new BattleRPG();
});